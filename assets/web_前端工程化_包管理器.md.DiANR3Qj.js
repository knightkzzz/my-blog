import{_ as a,c as l,o,ae as n}from"./chunks/framework.DbnbUhgt.js";const r="/my-blog/npm.png",s="/my-blog/yarn.webp",i="/my-blog/pnpm.webp",b=JSON.parse('{"title":"解决的问题","description":"","frontmatter":{},"headers":[],"relativePath":"web/前端工程化/包管理器.md","filePath":"web/前端工程化/包管理器.md"}'),t={name:"web/前端工程化/包管理器.md"};function d(p,e,m,_,u,h){return o(),l("div",null,e[0]||(e[0]=[n('<h1 id="解决的问题" tabindex="-1">解决的问题 <a class="header-anchor" href="#解决的问题" aria-label="Permalink to &quot;解决的问题&quot;">​</a></h1><ul><li>得益于ESM的出现</li><li>主要是解决了包与包之间的依赖管理以及版本的迭代问题，使得开发者不再关心包之间的引入顺序以及版本冲突等问题</li><li>通过包管理器可以方便的安装、卸载、更新、查看依赖包</li></ul><hr><h1 id="npm" tabindex="-1">NPM <a class="header-anchor" href="#npm" aria-label="Permalink to &quot;NPM&quot;">​</a></h1><p>在 npm 3.0 版本之前，项目的 node_modules 会呈现出嵌套结构，也就是说，我安装的依赖、依赖的依赖、依赖的依赖的依赖...，都是递归嵌套的 <img src="'+r+'" alt="npm"></p><ul><li>设计上的缺陷 <ol><li><strong>路径过长问题</strong>： 由于包的嵌套结构 ， node_modules 的目录结构可能会变得非常深，甚至可能会超出系统路径长度上限 ，毕竟 windows 系统的文件路径默认最多支持 256 个字符</li><li><strong>磁盘空间浪费</strong>： 多个包之间难免会有公共的依赖，公共依赖会被多次安装在不同的包目录下，导致磁盘空间被大量浪费 。比如上面 express 和 A 都依赖了 accepts，它就被安装了两次</li><li><strong>安装速度慢</strong>：由于依赖包之间的嵌套结构，npm 在安装包时需要多次处理和下载相同的包，导致安装速度变慢，尤其是在依赖关系复杂的项目中</li></ol></li></ul><hr><h1 id="yarn" tabindex="-1">YARN <a class="header-anchor" href="#yarn" aria-label="Permalink to &quot;YARN&quot;">​</a></h1><ul><li>yarn 的主要改进之一就是通过扁平化依赖结构来解决嵌套依赖树的问题</li><li>具体来说铺平，yarn 尽量将所有依赖包安装在项目的顶层 node_modules 目录下，而不是嵌套在各自的 node_modules 目录中。</li><li>这样一来，减少了目录的深度，避免了路径过长的问题 ，也尽可能避免了依赖被多次重复安装的问题 <img src="'+s+'" alt="yarn"><br> 然而，有些依赖包还是会在自己的目录下有一个 node_modules 文件夹，出现嵌套的情况，例如 yarn-example 下的http-errors 依赖包就有自己的 node_modules，原因是: <br><br> 当一个项目的多个依赖包需要同一个库的不同版本时，yarn 只能将一个版本的库提升到顶层 node_modules 目录中。 对于需要这个库其他版本的依赖，yarn 仍然需要在这些依赖包的目录下创建一个嵌套的 node_modules 来存放不同版本的包 <br><br> 比如，包 A 依赖于 lodash@4.0.0，而包 B 依赖于 lodash@3.0.0。由于这两个版本的 lodash 不能合并，yarn 会将 lodash@4.0.0 提升到顶层 node_modules，而 lodash@3.0.0 则被嵌套在包 B 的 node_modules 目录下。</li></ul><hr><h1 id="幽灵依赖" tabindex="-1">幽灵依赖 <a class="header-anchor" href="#幽灵依赖" aria-label="Permalink to &quot;幽灵依赖&quot;">​</a></h1><p>虽然 yarn 和 npm 都采用了扁平化的方案来解决依赖嵌套的问题，但这种方案本身也有一些缺陷，其中幽灵依赖是一个主要问题。 <br><br> 幽灵依赖，也就是你明明没有在 package.json 文件中声明的依赖项，但在项目代码里却可以 require 进来 这个也很容易理解，因为依赖的依赖被扁平化安装在顶层 node_modules 中，所以我们能访问到依赖的依赖</p><h1 id="pnpm" tabindex="-1">PNPM <a class="header-anchor" href="#pnpm" aria-label="Permalink to &quot;PNPM&quot;">​</a></h1><p>pnpm 通过全局存储和软硬链接机制从根源上解决了依赖重复安装和路径长度问题，同时也避免了扁平化依赖结构带来的幽灵依赖问题</p><ul><li><strong>三层寻址</strong><ol><li>所有 npm 包都安装在全局目录 ~/.pnpm-store/v3/files 下，同一版本的包仅存储一份内容，甚至不同版本的包也仅存储 diff 内容。</li><li>顶层 node_modules 下有 .pnpm 目录以打平结构管理每个版本包的源码内容，以硬链接方式指向 pnpm-store 中的文件地址。</li><li>每个项目 node_modules 下安装的包以软链接方式将内容指向 node_modules/.pnpm 中的包。所以每个包的寻找都要经过三层结构：node_modules/package-a &gt; 软链接 node_modules/.pnpm/package-a@1.0.0/node_modules/package-a &gt; 硬链接 ~/.pnpm-store/v3/files/00/xxxxxx。 <br><br><img src="'+i+'" alt="pnpm"></li></ol></li></ul><h1 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h1><ul><li><p>npm2 的嵌套结构： 每个依赖项都会有自己的 node_modules 目录，导致了依赖被重复安装，严重浪费了磁盘空间💣；在依赖层级比较深的项目中，甚至会超出 windows 系统的文件路径长度💣</p></li><li><p>npm3+ 和 Yarn 的扁平化策略： 尽量将所有依赖包安装在项目的顶层 node_modules 目录下，解决了 npm2 嵌套依赖的问题。但是该方案有一个重大缺陷就是“幽灵依赖”💣；而且依赖包有多个版本时，只会提升一个，那其余版本依然会被重复安装，还是有浪费磁盘空间的问题💣</p></li><li><p>pnpm全局存储和符号链接机制： 结合软硬链和三层寻址，解决了依赖被重复安装的问题，更加变态的是，同一盘符下的不同项目都可以共用一个全局 pnpm store。节省了磁盘空间，并且根本不存在“幽灵依赖”，安装速度还贼快💪💪💪</p></li></ul>',17)]))}const g=a(t,[["render",d]]);export{b as __pageData,g as default};
